*MRaster* is a very simple C++ library for generating raster images --
espeically things like fractals.

It is designed to be easy enough for beginners, but advanced enough
for experts.  It integrates well into existing code, uses pure C++20,
requires no external dependencies, and is quite fast.

Some examples of what can be done with *MRaster*:

  -  [[https://www.mitchr.me/SS/mandelbrot/index.html][Mandelbrot Mountains]]
  -  [[https://www.mitchr.me/SS/newton/index.html][Newton Fractal]]
  -  [[https://www.mitchr.me/SS/BurningShip/index.html][Burning Ship]]
  -  [[https://www.mitchr.me/SS/multibrot/index.html][Multibrot Fractals]]
  -  [[https://www.mitchr.me/SS/tricorn/index.html][Tricorn Fractal]]
  -  [[https://www.mitchr.me/SS/collatz/index.html][Collatz Fractal]]
  -  [[https://www.mitchr.me/SS/tippets/index.html][Tippets Fractal]]
  -  [[https://www.mitchr.me/SS/PickoverPopcorn/index.html][Pickover Popcorn]]
  -  [[https://www.mitchr.me/SS/mandelbrotBiomorph/index.html][Mandelbrot Biomorph]]
  -  [[https://www.mitchr.me/SS/mandelbrotInv/index.html][Inverted Mandelbrot]]
  -  [[https://www.mitchr.me/SS/swirl/index.html][Peter de Jong Fractal]]
  -  [[https://www.mitchr.me/SS/sic/index.html][Symmetric Fractals]]
  -  [[https://www.mitchr.me/SS/ChaosGame/index.html][Chaos Game]]
  -  [[https://www.mitchr.me/SS/AGasket/index.html][Apollonian Gasket]]
  -  [[https://www.mitchr.me/SS/circles2/index.html][Circle Art]]
  -  [[https://www.mitchr.me/SS/desktops/index.html][Some desktop backgrounds]]

For a bit more detail about *MRaster*: [[https://richmit.github.io/mraster/index.html]]

A quick start guide: [[https://richmit.github.io/mraster/QuickStart.html]]

Color schemes included in *MRaster*: [[https://richmit.github.io/mraster/ColorSchemes.html]]

API Documentation: [[https://www.mitchr.me/SS/mraster/doc-lib/autodocs/html/index.html]]

Example Documentation: [[https://www.mitchr.me/SS/mraster/doc-examples/autodocs/html/index.html]]

The code: [[https://github.com/richmit/mraster/]]

*Versions:*
 - Version 20.x.x
   - Much more modern API
   - Good unit test coverage
   - Requires a compiler with good C++20 support
   - Still in beta, but pretty solid at this point
 - Version 6.x.x
   - Has been published and used since the 1990's
   - Quite mature
   - Old school API

*Version Recommendation:* Use 20.x.x unless you have an old creepy compiler that just can't do C++20.
