# -*- Mode:Org; Coding:utf-8; fill-column:158 -*-
# ######################################################################################################################################################.H.S.##
# FILE:        index.org
#+TITLE:       MRaster
#+AUTHOR:      Mitch Richling
#+EMAIL:       http://www.mitchr.me/
#+DATE:        2022-07-28
#+DESCRIPTION: DESCRIPTION FIXME
#+KEYWORDS:    KEYWORDS FIXME
#+LANGUAGE:    en
#+OPTIONS:     num:t toc:nil \n:nil @:t ::t |:t ^:nil -:t f:t *:t <:t skip:nil d:nil todo:t pri:nil H:5 p:t author:t html-scripts:nil
# FIXME: When uncommented the following line will render latex equations as images embedded into exported HTML, when commented MathJax will be used
# #+OPTIONS:     tex:dvipng
# FIXME: Select ONE of the three TODO lines below
# #+SEQ_TODO:    ACTION:NEW(t!) ACTION:ASSIGNED(a!@) ACTION:WORK(w!) ACTION:HOLD(h@) | ACTION:FUTURE(f) ACTION:DONE(d!) ACTION:CANCELED(c!)
# #+SEQ_TODO:    TODO:NEW(T!)                        TODO:WORK(W!)   TODO:HOLD(H@)   |                  TODO:DONE(D!)   TODO:CANCELED(C!)
#+SEQ_TODO:    TODO:NEW(t)                         TODO:WORK(w)    TODO:HOLD(h)    | TODO:FUTURE(f)   TODO:DONE(d)    TODO:CANCELED(c)
#+PROPERTY: header-args :eval never-export
#+HTML_HEAD: <style>body { width: 95%; margin: 2% auto; font-size: 18px; line-height: 1.4em; font-family: Georgia, serif; color: black; background-color: white; }</style>
#+HTML_HEAD: <style>body { min-width: 500px; max-width: 1024px; }</style>
#+HTML_HEAD: <style>h1,h2,h3,h4,h5,h6 { color: #A5573E; line-height: 1em; font-family: Helvetica, sans-serif; }</style>
#+HTML_HEAD: <style>h1,h2,h3 { line-height: 1.4em; }</style>
#+HTML_HEAD: <style>h1.title { font-size: 3em; }</style>
#+HTML_HEAD: <style>.subtitle { font-size: 0.6em; }</style>
#+HTML_HEAD: <style>h4,h5,h6 { font-size: 1em; }</style>
#+HTML_HEAD: <style>.org-src-container { border: 1px solid #ccc; box-shadow: 3px 3px 3px #eee; font-family: Lucida Console, monospace; font-size: 80%; margin: 0px; padding: 0px 0px; position: relative; }</style>
#+HTML_HEAD: <style>.org-src-container>pre { line-height: 1.2em; padding-top: 1.5em; margin: 0.5em; background-color: #404040; color: white; overflow: auto; }</style>
#+HTML_HEAD: <style>.org-src-container>pre:before { display: block; position: absolute; background-color: #b3b3b3; top: 0; right: 0; padding: 0 0.2em 0 0.4em; border-bottom-left-radius: 8px; border: 0; color: white; font-size: 100%; font-family: Helvetica, sans-serif;}</style>
#+HTML_HEAD: <style>pre.example { white-space: pre-wrap; white-space: -moz-pre-wrap; white-space: -o-pre-wrap; font-family: Lucida Console, monospace; font-size: 80%; background: #404040; color: white; display: block; padding: 0em; border: 2px solid black; }</style>
#+HTML_LINK_HOME: https://www.mitchr.me/
#+HTML_LINK_UP: https://github.com/richmit/mraster/
# ######################################################################################################################################################.H.E.##

#+ATTR_HTML: :border 2 solid #ccc :frame hsides :align center
| Copyright \copy {{{time(%Y)}}} Mitch Richling. All rights reserved. |

#+TOC: headlines 5

* Introduction
:PROPERTIES:
:CUSTOM_ID: introduction
:END:

From the README:
#+BEGIN_QUOTE
------
#+INCLUDE: "../README.org"
------
#+END_QUOTE

* Design goals
:PROPERTIES:
:CUSTOM_ID: goals
:END:

   - *Extreme portability (ISO C++20 only, zero external library requirements)*
   - *Super simple and easy to use, but full featured enough for an expert to be happy with*\\
     My goal was to be able to hand this package to a student with minimal C++ experience, and have them be able to create a Mandelbrot image in an few
     minutes.  For the most part my students were very successful!
   - *Easy integration with existing code and libraries* \\
     The idea is to make the classes adapt to the setting in which they are being used, and not to force programmers to adapt.  For example, colors may be set
     via naive types, numeric characters, hex strings, web color hex strings, name strings, enumerated corner names, symbolic characters, or floating point
     numbers.  As another example points for drawing functions be be provided as coordinate pairs, point objects, complex numbers, tuples, arrays, etc...
   - *Extreme flexibility /and/ high performance* \\
     In general, many operations are optimized for the specific image layout and type. For example a small, integer based color may be treated in RAM as a
     single packed integer while larger colors may be treated as an array of channels.  As another example, =colorTpl= member functions will pass a color by
     value if it is small (like a 24-bit RGB color), and by const reference if it large (like a 192-bit RGB color).  In addition the code is carefully
     structured to allow the optimizer to do as much compile time optimization as possible.
   - *No Explicit Limits* \\
     Image size, channel depth, and channel count are limited only by available RAM.
   - *Sophisticated color API via a zero cost, object based pixel store* \\
     *=MRaster=* is an outlier among image libraries in that pixels are objects.  These objects deliver a very rich API for color theory computations, color
     schemes, transformations, etc...  And they do so with *zero* overhead in RAM or runtime performance.  In fact, these templated objects are one of the
     primary tools used to optimize *=MRaster=* performance.  Before the conversion to C++20, =colorTpl= made up about 80% of the code base -- yes larger than
     =ramCanvasTpl= even with the complexity of the scanline conversion code in the canvas object.
   - *High reliability* \\
     The library is very mature and has been in published since 1991.  While the code has undergone major rewrites in that time, each rewrite has been
     regression tested against the previously stable version.  More recently, an extensive unit test suite has been built up against the =colorTpl= class.
   - *Mathematical Use cases*\\
     Images have both real & integer coordinates, so they may be thought of as part of the real plane.  In addition a great many
     [[./ColorSchemes.org][discrete and continuous color schemes]] are supported.  Together these features make *=MRaster=* a very friendly environment for
     mathematically oriented visualization -- stuff like drawing Mandelbrot set fractals.
   - *100% focus on raster graphics synthesis*
     This is kind of a non-feature.  We simply don't try to do things like anti-aliasing, vector graphics, or FFT based image processing. What we do:
     - Manipulate pixels!
     - Efficient primitive scanline conversion and clipping including Old school "pixel paint" techniques (set, xor, and, etc....)

* Who is using it, and what are they using it for?
:PROPERTIES:
:CUSTOM_ID: use
:END:

While I can't know what everyone uses it for, many users have shared with me how they use *=MRaster=*.

 - The majority of *=MRaster=* users are doing direct image synthesis for mathematical visualization.
   - Raster based fractals like the Mandelbrot set\\
     *=MRaster=* is used for some university non-linear dynamics courses, generating a higher user count than I expected.
   - Strange attractor projections, incidence histograms, bifurcation plots, etc...
   - Complex function phase portraits
   - Making color schemes for other graphics tools
   - Producing POV-ray Maps and Height fields
 - Visualizations in HPC (supercomputer) environments.  For large 2D fields, *=MRaster=* can be a less complex and more efficient alternative to traditional
   visualization tools.
 - Scientific images (astronomy and microscopy mostly) with very high depth and/or channel count.
 - Satellite and other hyperspectral remote-sensing imagery with crazy numbers of channels.
 - The last sizable group of *=MRaster=* users makes no use of the "raster" part. ;)
   - Many developers use the =colorTpl= template for color theory computations with other graphics libraries.
   - Quite a few people use =colorTpl= for creating [[./ColorSchemes.org][color schemes]] for visualizations created in other tools.

* Perhaps more important is what people don't use it for.
:PROPERTIES:
:CUSTOM_ID: nonuse
:END:

What don't we do with =MRaster=?  Frankly, the non-features are features -- i.e. we don't do things that we are not good at or things for which other
libraries are better.

 - Anti-aliased primitive rendering.
 - Sophisticated font rendering.
 - Very little support for non-homogeneous image processing transforms.
 - No 3D -- but *=MRaster=* makes for a fantastic back end for 3D rendering tools.

Most of these things can be better achieved via other libraries:

 - [[../tools/index.html#lib-vis][Cairo]] -- My favorite vector graphics library.
 - [[../tools/index.html#imagepro][ImageJ]] -- One of my favorite image analysis & processing platforms.
 - [[../tools/index.html#images][ImageMagick]] -- A veritable Swiss army knife for batch image processing.
 - [[../tools/index.html#lib-vis][VTK]] -- Comprehensive 3D data visualization library.

* Gallery
:PROPERTIES:
:CUSTOM_ID: Gallery
:END:

#+BEGIN_CENTER
[[https://www.mitchr.me/SS/AGasket/index.html][file:./pics/gallery/apollonian_gasket_2D_01_250.jpg]]
[[https://www.mitchr.me/SS/sierpinski/index.html][file:./pics/gallery/sierpinskiTriangle_thumb.jpg]] \\
[[http://www.mitchr.me/SS/ChaosGame/index.html][file:./pics/gallery/chaosGame,5,-1,-1,1,2.3_270.jpg]]
[[http://www.mitchr.me/SS/ChaosGame/index.html][file:./pics/gallery/chaosGame,6,2,2,-1,2_270.jpg]] \\
[[http://www.mitchr.me/SS/mandelbrot/index.html][file:./pics/gallery/mandelbrot_c_thumb.jpg]]
[[http://www.mitchr.me/SS/mandelbrot/index.html][file:./pics/gallery/potMandelbrot_a_0d_279.jpg]]
[[http://www.mitchr.me/SS/mandelbrot/index.html][file:./pics/gallery/triangleMandelbrot_thumb.jpg]] \\
[[http://www.mitchr.me/SS/newton/index.html][file:./pics/gallery/newton2_c_thumb.jpg]]
[[http://www.mitchr.me/SS/newton/index.html][file:./pics/gallery/newton3_c_thumb.jpg]]
[[http://www.mitchr.me/SS/newton/index.html][file:./pics/gallery/newton_thumb.jpg]] \\
[[http://www.mitchr.me/SS/swirl/index.html][file:./pics/gallery/peterdejong_1c.png]] \\
[[http://www.mitchr.me/SS/sic/index.html][file:./pics/gallery/sic_13_274.jpg]]
[[http://www.mitchr.me/SS/sic/index.html][file:./pics/gallery/sic_23_274.jpg]]
[[http://www.mitchr.me/SS/sic/index.html][file:./pics/gallery/sic_26_274.jpg]]
#+END_CENTER
