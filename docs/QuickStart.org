# -*- Mode:Org; Coding:utf-8; fill-column:158 -*-
# ######################################################################################################################################################.H.S.##
# FILE:        QuickStart.org
#+TITLE:       MRaster Quick Start
#+SUBTITLE:    Linux/UNIX/Msys2/Cygwin/OSX
#+AUTHOR:      Mitch Richling
#+EMAIL:       http://www.mitchr.me/
#+DATE:        2022-07-28
#+DESCRIPTION: Minimal tutorial for getting started with MRaster
#+KEYWORDS:    KEYWORDS FIXME
#+LANGUAGE:    en
#+OPTIONS:     num:t toc:nil \n:nil @:t ::t |:t ^:nil -:t f:t *:t <:t skip:nil d:nil todo:t pri:nil H:5 p:t author:t html-scripts:nil 
#+SEQ_TODO:    TODO:NEW(t)                         TODO:WORK(w)    TODO:HOLD(h)    | TODO:FUTURE(f)   TODO:DONE(d)    TODO:CANCELED(c)
#+PROPERTY: header-args :eval never-export
#+HTML_HEAD: <style>body { width: 95%; margin: 2% auto; font-size: 18px; line-height: 1.4em; font-family: Georgia, serif; color: black; background-color: white; }</style>
#+HTML_HEAD: <style>body { min-width: 500px; max-width: 1024px; }</style>
#+HTML_HEAD: <style>h1,h2,h3,h4,h5,h6 { color: #A5573E; line-height: 1em; font-family: Helvetica, sans-serif; }</style>
#+HTML_HEAD: <style>h1,h2,h3 { line-height: 1.4em; }</style>
#+HTML_HEAD: <style>h1.title { font-size: 3em; }</style>
#+HTML_HEAD: <style>.subtitle { font-size: 0.6em; }</style>
#+HTML_HEAD: <style>h4,h5,h6 { font-size: 1em; }</style>
#+HTML_HEAD: <style>.org-src-container { border: 1px solid #ccc; box-shadow: 3px 3px 3px #eee; font-family: Lucida Console, monospace; font-size: 80%; margin: 0px; padding: 0px 0px; position: relative; }</style>
#+HTML_HEAD: <style>.org-src-container>pre { line-height: 1.2em; padding-top: 1.5em; margin: 0.5em; background-color: #404040; color: white; overflow: auto; }</style>
#+HTML_HEAD: <style>.org-src-container>pre:before { display: block; position: absolute; background-color: #b3b3b3; top: 0; right: 0; padding: 0 0.2em 0 0.4em; border-bottom-left-radius: 8px; border: 0; color: white; font-size: 100%; font-family: Helvetica, sans-serif;}</style>
#+HTML_HEAD: <style>pre.example { white-space: pre-wrap; white-space: -moz-pre-wrap; white-space: -o-pre-wrap; font-family: Lucida Console, monospace; font-size: 80%; background: #404040; color: white; display: block; padding: 0em; border: 2px solid black; }</style>
#+HTML_LINK_HOME: https://www.mitchr.me/
#+HTML_LINK_UP: http://richmit.github.io/mraster/index.html
# ######################################################################################################################################################.H.E.##

#+ATTR_HTML: :border 2 solid #ccc :frame hsides :align center
| Copyright \copy {{{time(%Y)}}} Mitch Richling. All rights reserved. |

#+TOC: headlines 5

* Quick Start (The Absolute Minimum *WITHOUT* Cmake)
:PROPERTIES:
:CUSTOM_ID: qs-min
:END:

If you are interested playing around with *=MRaster=* as quickly as possible, then this section is for you.

The first step is to download *=MRaster=* and *=MRMathCPP=*.  The easiest way is to clone them with git:

#+BEGIN_EXAMPLE
git clone 'https://github.com/richmit/mraster.git'
git clone 'https://github.com/richmit/MRMathCPP.git'
#+END_EXAMPLE

Alternatly, you could download the zip files:
  - [[https://github.com/richmit/mraster/archive/refs/heads/master.zip][MRaster]]
  - [[https://github.com/richmit/MRMathCPP/archive/refs/heads/MRMathCPP.zip][MRMathCPP]]

Once you have it downloaded, make note of the "=lib=" folder within each repository containing all the headers.  Both libraries are "header only" meaning all
you need to to to use them is include the headers.  If you are looking for the absolute simplest path forward, just copy the =*.hpp= files in *both* "=lib="
directories into the directory with your code.  Alternately, if you are using an IDE, then you can simply "add" the include files to the project in your IDE.
Alternately you can direct your build environment to add the "=lib=" directories to your compiler's "include path".  With an IDE that's usually a few clicks away.  
On the command line, with GCC/Clang, you can add the directories with the =-I= option.

Here is a very minimal example you can try.  Put in a file called "=hello.cpp=":

#+begin_src sh :results output verbatum :exports results :wrap "src c++ :eval never :tangle no"
cat ../lib/hello.cpp
#+end_src

#+RESULTS:
#+begin_src c++ :eval never :tangle no
#include "ramCanvas.hpp"                                                     // The main MRaster include

int main(void) {
  mjr::ramCanvas3c8b theRamCanvas(1024, 1024);                               // Create a canvas object
  for(int y=0;y<theRamCanvas.getNumPixY();y++)                               // Run over the rows 
    for(int x=0;x<theRamCanvas.getNumPixX();x++)                             //   and columns of the image
      theRamCanvas.drawPoint(x, y, mjr::color3c8b::csCColdeRainbow::c(x+y)); // Pick a "rainbow" color for the point
  theRamCanvas.writeTIFFfile("hello.tiff");                                  // Write out our image to disk
}
#+end_src

Now we can compile it with GCC like this:

#+begin_src sh :exports source :eval never
g++ -m64 -std=gnu++20 hello.cpp -o hello
#+end_src

Now you can run it, and take a look at the file it created ("=hello.tiff="):

#+ATTR_HTML: :width 800 :align center
[[file:./pics/quick/hello.png]]

That's it!  How easy was that?

** How do I get advanced TIFF reader support without =cmake=?
:PROPERTIES:
:CUSTOM_ID: qs-min-tiff
:END:

#+BEGIN_QUOTE
If you have =libtiff= installed in a standard location, then you can probably just add "=-DTIFF_FOUND" to the compile command like this:

#+begin_src sh :exports source :eval never
g++ -DTIFF_FOUND -m64 --std=gcc++20 hello.cpp -o hello
#+end_src

Please note that advanced TIFF reader is only required to *read* TIFF files.  *=MRaster=* can save TIFF, TGA, and MRAW files without any external library support.
#+END_QUOTE

* Playing With *=MRaster=*'s Example Programs
:PROPERTIES:
:CUSTOM_ID: examples
:END:

Probably the first stop for most people trying out *=MRaster=* is the example programs.  

*=MRaster=* ships with a =cmake= build system that should be able to interrogate your environment, and produce make files for your OS.  One complication is
that I've broken the project into two git repositories (one for some generic math stuff and another for *=MRaster=* proper).  To build the example programs:

#+begin_src sh :exports code :eval never
git clone 'https://github.com/richmit/MRMathCPP.git'    # Download MRMathCPP
cd MRMathCPP                                            # Change directory to the root of the MRMathCPP git repository
mkdir build                                             # Create a 'build' directory
cd build                                                # Change directory to the build directory
cmake -G 'MSYS Makefiles' ..                            # Configure the build system with cmake (NOTE 1)
cmake --build . -t install                              # Install the package in the build directory (NOTE 2)
cd ../..                                                # Change directory back to where you cloned the first repo
git clone 'https://github.com/richmit/mraster.git'      # Download MRaster
cd mraster                                              # Change directory to the root of the mraster git repository
mkdir build                                             # Create a 'build' directory
cd build                                                # Change directory to the build directory
cmake -G 'MSYS Makefiles' ..                            # Configure the build system with cmake (NOTE 1)
cmake --build . -t examples                             # Build all the examples
#+end_src

 - NOTE 1 ::
   - I normally use the "=configure.sh=" script in the root directory instead of running =cmake= directly for the configuration step.  I don't suggest it
     above because it won't work for everybody because "=configure.sh=" is a =bash= script -- i.e.  it will only work if you have a working =bash= envoronmtn
     (i.e. linux, macOS, UNIX, Windows MSYS 2, Windows WSL, etc...).
   - In the example above we use "=MSYS Makefiles=" for the "=-G=" option -- this value works for Windows 10/11 running MSYS2.  
   - If you don't know what to use for the "=-G=" option, then take a look at the "=configure.sh=" script for ideas.
 - NOTE 2 ::
   - The command will install the =cmake= package into the build directory within the git repository.  In particular, this step will *not* install anything on
     your system!  If you *do* want to install the package someplace, then you can use the standard =cmake= install arguments to do that.
   - This step is not actually necessary.  The =cmake= configuration in *=MRaster=* will detect a *=MRMathCPP=* repository located at the same level and
     consume the include files even if the package configuration hasn't been generated or installed.  I suggest doing the install because it insures the
     *=MRMathCPP=* can be properly configured on your system, and sets up a proper =cmake= package to export the library.

* Platform Notes
:PROPERTIES:
:CUSTOM_ID: platform-notes
:END:

** Windows 11 with MSYS2 GCC 12.1.0 (and newer GCCs -- tested up to v14.1.0)
:PROPERTIES:
:CUSTOM_ID: platform-notes-m2w11gcc12
:END:

Everything works with the following cmake:

#+begin_src sh :eval never :tangle no :exports code
cmake -G 'MSYS Makefiles' -DCMAKE_CXX_COMPILER=g++ ..
#+end_src

** Windows 11 with MSYS2 clang 14.0.6-18 (and newer clangs -- tested up to v18.1.6)
:PROPERTIES:
:CUSTOM_ID: platform-notes-m2w11clang14
:END:

Everything works with the following cmake:

#+begin_src sh :eval never :tangle no :exports code
cmake -G 'MSYS Makefiles' -DCMAKE_CXX_COMPILER=clang++ ..
#+end_src

** Windows 11 with MSYS2 cmake and Visual Studio 2022 Community Edition
:PROPERTIES:
:CUSTOM_ID: platform-notes-m2w11vs2022
:END:

This method works, but you won't get any external dependencies like =GLUT=, =SDL2=, =libTIFF=, =boost=, etc...  But, you will get enough to run many of the examples.

From the MSYS2 shell, we can run cmake like this:

#+begin_src sh :eval never :tangle no :exports code
cmake -G 'Visual Studio 17 2022' ..
#+end_src

Then open up the directory with explorer, and double click on one of the project files.  That will open up VS, and load up the project.

** Windows 11 with Visual Studio 2022 Community Edition
:PROPERTIES:
:CUSTOM_ID: platform-notes-w11vs2022
:END:

Everything works, but it's harder to get set up.  Simply fire up VS, and open the folder with the =CMakeLists.txt= file in it.  VS will detect a =cmake=
project.  Next use [[https://vcpkg.io/en/index.html][vcpkg]] to install =GLUT=, =SDL2=, =libTIFF=, & =boost=.  Update =CMakeLists.txt= as described
[[https://vcpkg.io/en/docs/users/buildsystems/cmake-integration.html][here]]. Refresh the =cmake=, and you should be able to build.

** Mac OS X Monterey 12.5.1 with Homebrew GCC 12.1.0
:PROPERTIES:
:CUSTOM_ID: platform-notes-osx1151hbGCC12
:END:

I had trouble getting =boost= to work, but everything else seems OK.  Note the =-DGLUT_glut_LIBRARY= option -- this is required to direct =cmake= to use the
Apple provided =GLUT= instead of =freeglut= from homebrew.

Here is what I installed via Homebrew:

#+begin_src sh :eval never :tangle no :exports code
brew install gcc
brew install cmake
brew install sdl2
brew install doxygen
brew install libtiff
brew install boost
#+end_src

And I used the following cmake:

#+begin_src sh :eval never :tangle no :exports code
cmake -DCMAKE_CXX_COMPILER=g++-12 -DGLUT_glut_LIBRARY=/System/Library/Frameworks/GLUT.framework ..
#+end_src

** Mac OS X Monterey 12.5.1 with Apple clang 13.1.6
:PROPERTIES:
:CUSTOM_ID: platform-notes-osx1151aclang1316
:END:

Right now =clang= doesn't have support for floating point template parameters, and thus the templates =csPLY_tpl= & =csCubeHelix_tpl= are not available.
This also means that examples using these features are not built: 
 - =color_lut_poly.cpp=
 - =color_lut_docs.cpp=
 - =color_lut_cubehelix.cpp=
 - =heart2022.cpp=

In addition, the Apple version of =clang= is missing the C++20 feature =bit_cast=.  Right now *=MRaster=* has conditional compilation sections removing those
features when using this compiler.  Hopefully Apple will have better C++20 support soon.

Lastly, note the =-DGLUT_glut_LIBRARY= option -- this is required to direct =cmake= to use the Apple provided =GLUT= instead of =freeglut= from homebrew.

#+begin_src sh :eval never :tangle no :exports code
cmake -DCMAKE_CXX_COMPILER=clang++ -DGLUT_glut_LIBRARY=/System/Library/Frameworks/GLUT.framework ..
#+end_src

** Debian 12.6 bookworm with GCC 13.3.0 (or with the GCC-14 package -- tested with version 14.0.1)
:PROPERTIES:
:CUSTOM_ID: platform-notes-lindeb126gcc133
:END:

This is the stock compiler that comes with bookworm.  It's a bit old, but everything seems to work

You can install everything you might want for *=MRaster=* like so:

#+begin_src sh :eval never :tangle no :exports code
sudo apt update
sudo apt upgrade
sudo apt-get install build-essential libsdl2-dev libtiff-dev freeglut3-dev doxygen libboost-all-dev 
sudo apt-get install povray ffmpeg imagemagick
#+end_src

Now you can use the following =cmake= command:

#+begin_src sh :eval never :tangle no :exports code
cmake ..
#+end_src

** Debian bullseye 11.4 with GCC 10.2.1
:PROPERTIES:
:CUSTOM_ID: platform-notes-lindeb114gcc1021
:END:

This is the stock compiler that comes with bullseye.  It's a bit old, and is missing support for both floating point template arguments and =bit_cast=.  

You can install everything you might want for *=MRaster=* like so:

#+begin_src sh :eval never :tangle no :exports code
sudo apt update
sudo apt upgrade
sudo apt-get install build-essential libsdl2-dev libtiff-dev freeglut3-dev doxygen libboost-all-dev 
sudo apt-get install povray ffmpeg imagemagick
sudo apt install cmake/bullseye-backports
#+end_src

Now you can use the following =cmake= command:

#+begin_src sh :eval never :tangle no :exports code
cmake ..
#+end_src

** Debian bullseye 11.4 with GCC 11.3
:PROPERTIES:
:CUSTOM_ID: platform-notes-lindeb114gcc113
:END:

With this newer compiler all *=MRaster=* features are supported.

This is the compiler currently in the bullseye =testing= channel for 11.4

Here is my =/etc/apt/sources.list= file:

#+begin_src text
deb http://deb.debian.org/debian bullseye main
deb http://deb.debian.org/debian bullseye-updates main
deb http://security.debian.org/debian-security bullseye-security main
deb http://ftp.debian.org/debian bullseye-backports main

deb http://mirrors.xmission.com/debian/ testing main non-free contrib
deb http://http.us.debian.org/debian testing main contrib non-free
deb http://ftp.us.debian.org/debian testing main non-free contrib
#+end_src

Here is my =/etc/apt/preferences= file:

#+begin_src text
Package: *
Pin: release a=testing
Pin-Priority: 490
#+end_src

You can install everything with the following:

#+begin_src sh :eval never :tangle no :exports code
sudo apt update
sudo apt upgrade
sudo apt-get install build-essential libsdl2-dev libtiff-dev freeglut3-dev doxygen libboost-all-dev 
sudo apt-get install povray ffmpeg imagemagick
sudo apt install cmake/bullseye-backports
sudo apt install -t testing g++-11 gcc-11
#+end_src

Now you can use the following =cmake= command:

#+begin_src sh :eval never :tangle no :exports code
cmake -DCMAKE_CXX_COMPILER=g++-11 ..
#+end_src

** Debian bullseye 11.6 with GCC 12.2
:PROPERTIES:
:CUSTOM_ID: platform-notes-lindeb116gcc122
:END:

With this newer compiler all *=MRaster=* features are supported.

This is the compiler currently in the bullseye =testing= channel for 11.6

Here is my =/etc/apt/sources.list= file:

#+begin_src text
[sudo] password for richmit:
deb http://deb.debian.org/debian bullseye main
deb-src http://deb.debian.org/debian bullseye main
deb http://deb.debian.org/debian bullseye-updates main
deb http://security.debian.org/debian-security bullseye-security main


deb http://deb.debian.org/debian testing main
deb-src http://deb.debian.org/debian testing main
#+end_src

Here is my =/etc/apt/preferences.d/prefs.pref= file:

#+begin_src text
Package: *
Pin: release a=stable
Pin-Priority: 900

Package: *
Pin: release a=testing
Pin-Priority: 400
#+end_src

You can install everything with the following:

#+begin_src sh :eval never :tangle no :exports code
sudo apt update
sudo apt upgrade
sudo apt-get install build-essential libsdl2-dev libtiff-dev freeglut3-dev doxygen libboost-all-dev 
sudo apt-get install povray ffmpeg imagemagick
sudo apt install -t testing --install-suggests gcc-12 gfortran-12 cmake
#+end_src

Now you can use the following =cmake= command:

#+begin_src sh :eval never :tangle no :exports code
cmake -DCMAKE_CXX_COMPILER=g++-11 ..
#+end_src

* Performance                                                      :noexport:

| System                                                  | Software                   | Result (sec) |
|---------------------------------------------------------+----------------------------+--------------|
| 2015 ventage 2.20GHz Dual-Core Intel i7 5650U Broadwell | Homebrew GCC 12.1.0        |      84.4048 |
| 2015 ventage 2.20GHz Dual-Core Intel i7 5650U Broadwell | Apple clang 13.1.6         |     108.0520 |
| 2022 ventage 3.30GHz Quad-Core Intel i7 11370H 11th Gen | MSYS2 GCC 12.1.0           |      62.1350 |
| 2022 ventage 3.30GHz Quad-Core Intel i7 11370H 11th Gen | MSYS2 clang 14.0.6         |      78.1136 |
| 2022 ventage 3.30GHz Quad-Core Intel i7 11370H 11th Gen | MSVC 2022                  |     110.0680 |
| 2022 ventage 3.30GHz Quad-Core Intel i7 11370H 11th Gen | WSL Debian 11.4 GCC 10.2.1 |      66.7385 |
| 2022 ventage 3.30GHz Quad-Core Intel i7 11370H 11th Gen | WSL Debian 11.4 GCC 11.3.0 |      66.2258 |

* FAQ
:PROPERTIES:
:CUSTOM_ID: gbl-faq
:END:

** Q1: What's up with "=-std=gcc++20=" instead of "=-std=c++20="?
:PROPERTIES:
:CUSTOM_ID: gbl-faq-q1
:END:

#+BEGIN_QUOTE
*A:* *=MRaster=* works just fine with standard C++20 compilers.  The "=-std=gcc++20=" option enables specific features of GCC that make *=MRaster=* better.  In
particular, it enables 128-bit integers on platforms that support it -- allowing, for example, a very high performance floating point RGBA image format.  If
you want to turn off 128-bit integers, and use pure C++20 instead with GCC, then you can use a command line like this:

#+begin_src sh :exports source :eval never
g++ -DMJR_LOOK_FOR_128_BIT_TYPES=0 -m64 --std=c++20 hello.cpp -o hello
#+end_src
#+END_QUOTE

** Q2: The examples seem to be missing standard/system include files
:PROPERTIES:
:CUSTOM_ID: gbl-faq-q2
:END:

#+BEGIN_QUOTE
*A:* It is good form to place necessary includes in each file that needs them; however, I have violated this sound practice in the examples shipped with
*=MRaster=*.  In particular, because the =ramCanvasTpl.hpp= and =MRcolorTpl.hpp= files include just about everything the examples need I have tended to shorten
up the examples and depend on the includes from these headers.
#+END_QUOTE

* Doxygen Links                                                    :noexport:

#+begin_src sh :exports results :results verbatum raw
export MSYS2_ARG_CONV_EXCL='*'
echo file:../build/doc-lib/autodocs/html/$(xmlstarlet.exe sel -t -v "/tagfile/compound[name='mjr::colorTpl']/filename" ../build/doc-lib/DTAGS)"#details"
#+end_src

#+RESULTS:
file:../build/doc-lib/autodocs/html/classmjr_1_1colorTpl.html#details

* Old Stuff                                                        :noexport:
*** Q2: What's up with "=-std=gcc++20=" instead of "=-std=c++20="?
:PROPERTIES:
:CUSTOM_ID: qs-faq-q2
:END:

#+BEGIN_QUOTE
*A:* *=MRaster=* works just fine with standard C++20 compilers.  The "=-std=gcc++20=" option enables specific features of GCC that make *=MRaster=* better.  In
particular, it enables 128-bit integers on platforms that support it -- allowing, for example, a very high performance floating point RGBA image format.  If
you want to turn off 128-bit integers, and use pure C++20 instead with GCC, then you can use a command line like this:

#+begin_src sh :exports source :eval never
g++ -DMJR_LOOK_FOR_128_BIT_TYPES=0 -m64 --std=c++20 hello.cpp -o hello
#+end_src
#+END_QUOTE

*** Q3: I got some weird errors about =bit_cast=.  What's up?
:PROPERTIES:
:CUSTOM_ID: qs-faq-q3
:END:

Probably your compiler is too old to support that part of the C++ standard.  One of the advantages of using =cmake= is that it tries to detect this issue.  Without =cmake=, you need to add the following
to your compile command (or get a better compiler):

#+begin_src sh :exports source :eval never
-DMISSING_P0476R2=1
#+end_src

*** Q4: I got some weird errors about complex numbers and =std::pow=? What's up?
:PROPERTIES:
:CUSTOM_ID: qs-faq-q4
:END:

Probably your compiler is too old to support that part of the C++ standard.  One of the advantages of using =cmake= is that it tries to detect this issue.  Without =cmake=, you need to add the following
to your compile command (or get a better compiler):

#+begin_src sh :exports source :eval never
-DMISSING_P1907R1=1
#+end_src

