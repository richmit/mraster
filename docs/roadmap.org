# -*- Mode:Org; Coding:utf-8; fill-column:158 -*-
# ######################################################################################################################################################.H.S.##
# FILE:        roadmap.org
#+TITLE:       MRaster Roadmap
#+SUBTITLE:    Ideas for future development
#+AUTHOR:      Mitch Richling
#+EMAIL:       http://www.mitchr.me/
#+DESCRIPTION: DESCRIPTION FIXME
#+KEYWORDS:    KEYWORDS FIXME
#+LANGUAGE:    en
#+OPTIONS:     num:t toc:nil \n:nil @:t ::t |:t ^:nil -:t f:t *:t <:t skip:nil d:nil todo:t pri:nil H:5 p:t author:t html-scripts:nil 
#+SEQ_TODO:    TODO:NEW(t)                         TODO:WORK(w)    TODO:HOLD(h)    | TODO:FUTURE(f)   TODO:DONE(d)    TODO:CANCELED(c)
#+PROPERTY: header-args :eval never-export
#+HTML_HEAD: <style>body { width: 95%; margin: 2% auto; font-size: 18px; line-height: 1.4em; font-family: Georgia, serif; color: black; background-color: white; }</style>
#+HTML_HEAD: <style>body { min-width: 500px; max-width: 1024px; }</style>
#+HTML_HEAD: <style>h1,h2,h3,h4,h5,h6 { color: #A5573E; line-height: 1em; font-family: Helvetica, sans-serif; }</style>
#+HTML_HEAD: <style>h1,h2,h3 { line-height: 1.4em; }</style>
#+HTML_HEAD: <style>h1.title { font-size: 3em; }</style>
#+HTML_HEAD: <style>.subtitle { font-size: 0.6em; }</style>
#+HTML_HEAD: <style>h4,h5,h6 { font-size: 1em; }</style>
#+HTML_HEAD: <style>.org-src-container { border: 1px solid #ccc; box-shadow: 3px 3px 3px #eee; font-family: Lucida Console, monospace; font-size: 80%; margin: 0px; padding: 0px 0px; position: relative; }</style>
#+HTML_HEAD: <style>.org-src-container>pre { line-height: 1.2em; padding-top: 1.5em; margin: 0.5em; background-color: #404040; color: white; overflow: auto; }</style>
#+HTML_HEAD: <style>.org-src-container>pre:before { display: block; position: absolute; background-color: #b3b3b3; top: 0; right: 0; padding: 0 0.2em 0 0.4em; border-bottom-left-radius: 8px; border: 0; color: white; font-size: 100%; font-family: Helvetica, sans-serif;}</style>
#+HTML_HEAD: <style>pre.example { white-space: pre-wrap; white-space: -moz-pre-wrap; white-space: -o-pre-wrap; font-family: Lucida Console, monospace; font-size: 80%; background: #404040; color: white; display: block; padding: 0em; border: 2px solid black; }</style>
#+HTML_LINK_HOME: https://www.mitchr.me/
#+HTML_LINK_UP: https://richmit.github.io/mraster/index.html
# ######################################################################################################################################################.H.E.##

#+ATTR_HTML: :border 2 solid #ccc :frame hsides :align center
| Copyright \copy 2016-2022 Mitch Richling. All rights reserved. |

#+TOC: headlines 5

This document is a collection of ideas for future development.  Don't
think of it as a roadmap of what will be done, but rather as a rough
guide of what I'm thinking about...

If you have something you really want, drop me a line.  It must might
end up on this list.

In no particular order:

 - Homo transforms
   - +Use callables for pixel transforms+ DONE.
   - +Complex abs/arg greyscale transform+ DONE.
 - +2D plane Color Schemes+ DONE
   - +Richardson+ DONE
   - +thaller HSL+ DONE
   - +thaller HSV+ DONE
   - +Around the cube arg+ DONE
   - Add them all to the color schemes page!
 - +Canvas Compositing+ DONE
   - +adjoinCanvas(const ramCanvasTpl &theCanvas, side);+ DONE
   - +insertCanvas(const ramCanvasTpl &theCanvas, intCrdT x1 = 0, intCrdT y1 = 0)+ DONE.
 - +pixel corner coordinates+ DONE
   - +Given a pixel, get a single corner given by indexes cornerX & cornerY -- cornerX & Y are 0 or 1.+ DONE.
   - +Given a pixel, get a single corner given by single index cornerIndex -- cornerIndex is 0, 1, 2, or 3.+ CANCELED
 - +point2d cast operators+ DONE
   - +complex+ DONE.
   - +tuple+ DONE.
   - +vector+ DONE.
 - coordinate conversion with point objects
   - +int2real(intCrdT x, intCrdT y)+ DONE.
   - +real2int(intCrdT x, intCrdT y)+ DONE.
 - Precomputed Mandelbrot
   - Add example that computes & saves convergence information in image files
     - Escape points
       - +Escape time+ DONE
       - Last iteration value
       - Iteration before last value
     - Cyclic points
       - +Period length+ DONE
       - +Time to first period+ DONE
       - Minimum modulus of points in cycle
       - Maximum modulus of points in cycle
   - +Consider doing above, but with HDF5 file -- and store all the orbits & cycles...+ CANCELED
   - +Add budabrot examples using pre-computed data+ CANCELED
 - +Add number formatting+ DONE
   - +Padded integers -- like we use in image file names & MRW headers+ DONE
   - +Floating point numbers+ CANCELED
 - +Add $IC_tC_p$ or ITP color space support+ CANCELED
   - +REF: https://en.wikipedia.org/wiki/ICtCp+ CANCELED
 - +Color difference:+ DONE
   - +Add colorTpl::distDeltaE1994+ DONE
   - +Add colorTpl::distDeltaE1976+ DONE
   - +Add colorTpl::distDeltaE2000+ CANCELED
   - +Add Rec. ITU-R BT.2124 or \Delta EITP https://en.wikipedia.org/wiki/Color_difference+ CANCELED
 - FITS
   - Add an example showing how to read a FITS file using FITSIO
 - Set channels
   - From an array (the object)
   - An iterator
   - An initializer list
 - Add cubic spline interpolation
   - Add: getPxColorInterpBCubS(double x, double y) -- bicubic spline
   - Add support to PxColorInterpolate
   - Add an entry to interpolationType -- CUBICSPLINE
   - Note I'm not talking about bicubic implemented with a smoothing kernel.
 - Save Greyscale ascii
   - A good sequences:
     #+begin_src text
     "$@B%8&WM#*oahkbdpqwmZO0QLCJUYXzcvunxrjft/\|()1{}[]?-_+~<>i!lI;:,"^`'. "
     " .:-=+*#%@"
     #+end_src
 - Make ramCanvas work like a standard container
   - Pixel store iterators
   - Work with standard algorithms
   - etc..
 - Interactive canvas observer
   - Fire off a thread that monitors a canvas and displays it.
   - Use an SDL2 or GLUT window.
   - Rate of update should be tuenable.
   - An occasional display artifact due to thread data collision is acceptable.
 - +Encode real coordinate information in saved images and use that data in ImageJ for measurements and mouse location+ CANCELED
   - +Write ImageJ plugin/tool that prints out real coordinates when clicking on an image.+ DONE
 - OpenMP
   - Spread OpenMP use across examples.
   - Include parallelism in ramCanvas
 - Draw Pixel functionality
   - Functional approach to pixel drawing methods
     - Have a functor called by drawPixel instead of a switch statement
     - +Option to have a color tfrm* method argument to drawPixel+ CANCELED
   - +A drawPixel-like method that increments a specified channel of the specified pixel by a given quantity  "addToPixel"+ DONE 2025-03-05
   - +More generic than above.  Take a colorTpl tfrm* style function to modify the specified pixel.+ CANCELED
 - ramCanvas Converters
   - Add C++20 concepts for converters & apply them to the methods that use converters
   - Add converter support to ramCanvas copy operation -- i.e. so we can "copy" data between canvases of a dissimilar types
   - Converters
     - Crop canvas
     - ramCanvasTpl: Add methods to copy/convert/filter data from another ramCanvas.
 - Method that returns a packed integer from a color value.  It should use a standard converter to do the job if one is not provided.
 - ramCanvasTpl: relations
   - Add operators: != & ==.
   - +Add isEqual+ DONE
   - +Add isClose+ DONE
   - +Add isSameSize+ DONE
   - +Add isNotSameSize+ DONE
 - unit tests
   - colorTpl
     - Add tests to make sure constants are correct for ALL types (minChanVal, maxChanVal, meanChanVal, etc....)
     - +Add GCC with 128-bit support tests+ DONE
   - ramCanvasTpl
     - Instead of comparing files, load files and compare images -- using an endianness aware MRW reader.
     - Test TIFF files in save_file test case -- by reading them in along with a reference MRW, and comparing the images in RAM.
     - Convert test_draw_fonts.cpp to a demo
     - Add unit tests for fonts
     - Add unit tests for Geometric transforms
     - Add unit tests for Homogeneous transforms
     - Add unit tests for Convolution
     - Add unit tests for image write with filters
 - Geometric Transformations:
   - Support both forward and reverse transformations.
   - Notation
     - Target Canvas: $T$ -- coordinates $(u, v)$
     - Source Canvas: $S$ -- coordinates $(x, y)$
     - Target color: $C_T(u, v)$ = color of pixel at $(u, v)$
     - Source color: $C_S(x, y)$ = color of pixel at $(x, y)$
     - Geometric mappings: 
       - forward: $f:S\rightarrow T$
         - $f(x, y)$ -> $(u, v)$
         - $C_T(\mathrm{round}(f(x, y)))$ \leftarrow $C_S(x, y)$
         - $f(x, y)$ might not be integer coordinates.  
           - So we just pick the closest.
         - Some $(x, y)$ coordinates $S$ might not map to valid $(u, v)$ coordinates in $T$ -- i.e. they might be off canvas.
         - Some pixels in $T$ might be hit by more than one set of $(x, y)$ coordinates.  
           - A stratigy needs to be selcted for which hit to take.
         - Algorithm
           - for each $(x, y)$ in $S$
             - Compute $(u, v)=\mathrm{round}(f(x, y))$.  
             - If $(u,v)$ are valid, then set $C_T(u, v) = C_S(x, y)$ otherwise $C_T(u, v) = \mathrm{GREEN}$.
       - reverse: $r:T\rightarrow S$
         - $r(u, v) -> (x, y)$
         - $C_T(u, v) \leftarrow C_S(r(u, v))$
         - $r(u, v)$ might not be integral
           - Image interpolation is the standard solution to this problem.
         - Some $(u, v)$ coordinats in $T$ might not be mapped valid coordinates in $S$.
           - We can identify these pixesl by coloring them with a guard color (like green)
       - Algorithm
         - for each $(u, v)$ in $T$
           - Compute $(x, y)=r(u, v)$
           - If ($x,y)$ is valid, then set $C_T(u, v) = \mathrm{interpolate}(C_S, x, y)$, else set $C_T(u, v) = \mathrm{GREEN}$.
   - Methods
     - +reverse: bivariate polynomial in x & y+ DONE.
       - Bivariate Polynomials
         - Single list of coefficients
         - Order is lexicographic
     - forward: bivariate polynomial in x & y
     - forward: univariate polynomial in r
     - +reverse: univariate polynomial in r+ DONE.
       - Compatable with Imagemagick's barrel distortion transformation
         - (X, Y) is the image center for both T & S
         - A, B, C, & D are constants
         - A+B+C+D=1 -- if you don't provide D it will be computed
         - r is the target radius: r=sqrt((u-X)^2+(v-Y)^2)
         - R is the source radius: R=sqrt((x-X)^2+(y-Y)^2)
         - Command line option looks like this: =-distort Barrel "A B C D X Y"=
         - The polynomial looks like this: R = r * ( A*r^3 + B*r^2 + C*r + D )
         - Algorithm:
           #+begin_src text
           for each (u,v) 
            r=sqrt((u-X)^2+(v-Y)^2)
            R = r * ( A*r^3 + B*r^2 + C*r + D )
            x = u * r / R + X
            y = v * r / R + Y
           #+end_src
     - forward: functor
     - +reverse: functor+ DONE.
     - forward: Affine matrix (3x3) transform
     - +reverse: Affine matrix (3x3) transform+ DONE.
       - Matrix
         - Just an array of 9 elements
 - Make use of tuple assignment notation
     #+begin_src c++
     std::tuple<float&, char&&, int> tpl(x, std::move(y), z);
     const auto& [a, b, c] = tpl;
     #+end_src
